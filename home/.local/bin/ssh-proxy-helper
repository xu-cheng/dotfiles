#!/usr/bin/env ruby
# frozen_string_literal: true

VERSION = "2.0"

require "ipaddr"
require "open3"
require "optparse"
require "socket"

host = nil
port = 22
proxy = nil
internal_nets = []

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: ssh-proxy-helper [options]"
  opts.version = VERSION
  opts.on("-H", "--host HOST", "Host name to connect") do |h|
    host = h
  end
  opts.on("-P", "--port Port", "Port number to connect") do |p|
    port = p.to_i
  end
  opts.on("--proxy PROXY", "Proxy host used as `ssh proxy -W %h:%p`") do |p|
    proxy = p
  end
  opts.on("--internal-ip IP", "CIDR IP range to indicate when to disable the proxy") do |net|
    internal_nets << IPAddr.new(net)
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts.help
    exit
  end
  opts.on_tail("-v", "--version", "Show version") do
    puts opts.ver
    exit
  end
end

opt_parser.parse!

if host.nil? || proxy.nil?
  warn opt_parser.help
  exit 1
end

ips = Socket.ip_address_list
            .map { |addr| IPAddr.new addr.ip_address.sub(/%.*$/, "") }

if File.exist?("/proc/sys/fs/binfmt_misc/WSLInterop")
  wsl_ips, status = Open3.capture2("/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe",
                                   "-Command",
                                   "Get-NetIPAddress | Select-Object -ExpandProperty IPAddress")
  ips += wsl_ips.split("\n").map(&:strip).reject(&:empty?).map { |addr| IPAddr.new(addr) } if status.success?
end

local_ips = ips.reject(&:loopback?)

if local_ips.any? { |ip| internal_nets.any? { |net| net.include? ip } }
  exec "nc", host, port.to_s
else
  warn "Connect to #{host} via #{proxy}."
  exec "ssh", "-q", proxy, "-W", "#{host}:#{port}"
end
