# vim: set ft=gdb:

# == import python modules ==
python
import os
import subprocess as sp
import sys
end

# == get XDG dirs ==
python
config_dir = os.environ.get('XDG_CONFIG_HOME', os.path.join(os.environ['HOME'], '.config'))
config_dir = os.path.join(config_dir, 'gdb')
data_dir = os.environ.get('XDG_DATA_HOME', os.path.join(os.environ['HOME'], '.local', 'share'))
data_dir = os.path.join(data_dir, 'gdb')
state_dir = os.environ.get('XDG_STATE_HOME', os.path.join(os.environ['HOME'], '.local', 'state'))
state_dir = os.path.join(state_dir, 'gdb')
if not os.path.exists(state_dir):
    os.makedirs(state_dir)
end

# == history configure ==
python gdb.execute('set history filename ' + os.path.join(state_dir, 'history'))
set history remove-duplicates 100
set history size 10000

# == gdb-dashboard configure ==
python
dashboard_dir = os.path.join(data_dir, 'dashboard')
dashboard_init = os.path.join(dashboard_dir, '.gdbinit')
if not os.path.exists(dashboard_init):
    sp.call(['git', 'clone', 'https://github.com/cyrus-and/gdb-dashboard', dashboard_dir])
gdb.execute('source ' + dashboard_init)
end

# custom stack command
# https://github.com/cyrus-and/gdb-dashboard/issues/28
define stack
python
stack = Stack()
stack.limit = 0
stack.show_arguments = True
stack.show_locals = True
stack.compact = True
print('\n'.join(stack.lines(Dashboard.get_term_width(), False)))
end
end

# set layout (hide assembly registers memory)
dashboard -layout source expressions history stack threads

# == mac config ==
python
if sys.platform == 'darwin':
    # required due to SIP
    gdb.execute('set startup-with-shell off')
    # check codesign
    gdb_path = sp.check_output(['which', 'gdb']).strip()
    if sp.call(['codesign', '-v', gdb_path]) != 0:
        print('Please codesign the gdb')
        print('https://sourceware.org/gdb/wiki/BuildingOnDarwin')
        sys.exit(1)
end
